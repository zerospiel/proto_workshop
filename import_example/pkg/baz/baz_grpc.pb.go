// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package baz

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	pluginpb "google.golang.org/protobuf/types/pluginpb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BazServiceClient is the client API for BazService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BazServiceClient interface {
	MethodName(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pluginpb.FooResponse, error)
}

type bazServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBazServiceClient(cc grpc.ClientConnInterface) BazServiceClient {
	return &bazServiceClient{cc}
}

func (c *bazServiceClient) MethodName(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pluginpb.FooResponse, error) {
	out := new(pluginpb.FooResponse)
	err := c.cc.Invoke(ctx, "/baz.BazService/MethodName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BazServiceServer is the server API for BazService service.
// All implementations must embed UnimplementedBazServiceServer
// for forward compatibility
type BazServiceServer interface {
	MethodName(context.Context, *emptypb.Empty) (*pluginpb.FooResponse, error)
	mustEmbedUnimplementedBazServiceServer()
}

// UnimplementedBazServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBazServiceServer struct {
}

func (UnimplementedBazServiceServer) MethodName(context.Context, *emptypb.Empty) (*pluginpb.FooResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MethodName not implemented")
}
func (UnimplementedBazServiceServer) mustEmbedUnimplementedBazServiceServer() {}

// UnsafeBazServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BazServiceServer will
// result in compilation errors.
type UnsafeBazServiceServer interface {
	mustEmbedUnimplementedBazServiceServer()
}

func RegisterBazServiceServer(s grpc.ServiceRegistrar, srv BazServiceServer) {
	s.RegisterService(&BazService_ServiceDesc, srv)
}

func _BazService_MethodName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BazServiceServer).MethodName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/baz.BazService/MethodName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BazServiceServer).MethodName(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BazService_ServiceDesc is the grpc.ServiceDesc for BazService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BazService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "baz.BazService",
	HandlerType: (*BazServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MethodName",
			Handler:    _BazService_MethodName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "baz.proto",
}
